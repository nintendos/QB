var queue = {};
queue.routeFilter = {};
queue.data = {};
queue.config = {
	routes:{
		filter:{
			default:'basic',
		}
	}
}

queue.filters = {};

queue.init = function(name) {
	queue.data[name] = [];
}

queue.routeFilter.register = function(name,filter) {
	if(queue.config.routes.filter.default == 'basic')
		queue.config.routes.filter.default = name;
	
	queue.filters[name] = filter;
}

queue.routeFilter.set = function(name) {
	queue.config.routes.filter.default = name;
}

/* Must set routeFilter function */
queue.route = function(data) {
	use = queue.filters[queue.config.routes.filter.default](data);

	return queue.use(use);
}

queue.use = function(name) {
	if(!queue.data[name]) {
		return false;
	}

	queue.data.working = name;

	return this;
}

queue.add = function(data) {
	queue.data[queue.data.working].push(data);

	return this;
}

queue.remove = function(pos) {
	queue.data[queue.data.working].splice(pos,1);

	return this;
}

queue.shift = function() {
	return queue.data[queue.data.working].shift();
}

queue.fetch = function() {
	return queue.data[queue.data.working];
}

queue.loop = function(callback) {
	var q = {data:{count:-1}};

	q.get = function(data) {
		return q.data.currentData;
	}

	q.passData = function(data) {
		q.data.currentData = data;
	}

	q.count = function() {
		q.data.count++;
	}

	q.getCount = function() {
		return q.data.count;
	}

	q.check = function(test) {
		if(q.get() === test) {
			return true;
		}else{
			return false;
		}
	}

	q.remove = function() {
		queue.use(queue.data.working).remove(q.data.count);
	}

	queue.data[queue.data.working].forEach(function(data){
		q.count();
		q.passData(data);
		callback(q);
	});
}

module.exports = queue;